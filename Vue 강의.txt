https://github.com/joshua1988/learn-vue-js

Lv. 4
https://github.com/joshua1988/vue-til
https://github.com/joshua1988/vue-til-server

# Vue CLI 2.x VS 3.x
- 명령어
  - 2.x : vue init '프로젝트 템플릿 이름' '파일 위치'
  - 3.x : vue create '프로젝트 이름'
 
 - 웹팩 설정 파일
  - 2.x : 노출 O
  - 3.x : 노출 X
  
 - 프로젝트 구성
  - 2.x : 깃업의 템플릿 다운로드
  - 3.x : 플러그인 기반으로 기능 추가

- ES6 이해도
  - 2.x : 필요 X
  - 3.x : 필요 O
 
# View
MVVM 패턴의 뷰모델(ViewModel) 에리어에 해당하는 화면(View)단 라이브러리
View (DOM) -> ViewModel (DOM Listener, Data Bindings) -> Model (Plain JavaScript Objects)

# 뷰 컴포넌트
컴포넌트는 화면의 영역을 구분하여 개발할 수 있는 뷰의 기능
컴포넌트 기반으로 화면을 개발하게 되면 코드의 재사용성이 올라가고 빠르게 화면을 제작
컴포넌트 간에 관계를 가짐
인스턴스는 기본적으로 루트 컴포넌트
전역 컴포넌트는 인스턴스에 자동으로 등록

# 컴포넌트 통신
뷰 컴포넌트는 각각 고유한 데이터 유효 범위를 갖음 -> 컴포넌트 간에 데이터를 주고 받기 위해선 아래와 같은 규칙을 따라야함
[하위 컴포넌트] -> [이벤트 발생] -> [상위 컴포넌트]
[하위 컴포넌트] <- [props 전달] <- [상위 컴포넌트]

# 엑시오스 AXIOS
뷰에서 권고하는 HTTP 통신 라이브러리
Promise 기반의 HTTP 통신 라이브러리이며 상대적으로 다른 HTTP 통신 라이브러리들에 비해 문서화가 잘되어 있고 API가 다양함

- 자바스크립트의 비동기 처리 패턴
1. callback
https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/
2. promise
https://joshua1988.github.io/web-development/javascript/promise-for-beginners/
3. promise + generator
4. async & await
https://joshua1988.github.io/web-development/javascript/js-async-await/

- 프론트엔드 개발자가 알아야하는 HTTP 프로토콜
https://joshua1988.github.io/web-development/http-part1/
https://developer.chrome.com/docs/devtools/

# 뷰 템플릿
뷰 템플릿 문법 : 뷰로 화면을 조작하는 방법
데이터 바인딩과 디렉티브로 나뉨

- 데이터 바인딩
뷰 인스턴스에서 정의한 속성들을 화면헤 표시하는 방법
기본적인 데이터 바인딩 방식은 {{}}

- 디렉티브
뷰로 화면의 요소를 더 쉽게 조작하기 위한 문법
화면 조작에서 자주 사용되는 방식들을 모아 디렉티브 형태로 제공 : v-

# 싱글 파일 컴포넌트

# ES6
ECMAScript 2015와 동일한 용어
2015년 ES5(2009년)이래로 진행한 첫 메이저 업데이트가 승인된 해
최신 Front-End Framwork인 React, Angular, Vue에서 권고하는 언어 형식
ES5에 비해 문법이 간결해져서 익숙해지면 코딩을 훨씬 편하게 할 수 있음

- Babel
구버번 브라우저 중에서는 ES6의 기능을 지원하지 않는 브라우저가 있으므로 transpiling이 필요
ES6의 문법을 각 브라우저의 호환 가능한 ES5로 변환하는 컴파일러

- const & let : 새로운 변수 선언 방식
블록단위 {} 로 변수의 범위가 제한되었음
const : 한번 선언한 값에 대해서 변경할 수 없음, 객체나 배열의 내부는 변경할 수 있음 -> 상수
let : 한번 선언한 값에 대해서 다시 선언할 수 없음

- ES5 특징 : Hoisting
Hosting이란 선언한 함수와 변수를 해석기가 가장 상단에 있는 것처럼 인식
js 해석기는 코드의 라인 순서와 관계없이 함수선언식과 변수를 위한 메모리 공간을 먼저 확보
function a()와 var는 코드의 최상단으로 끌어올려진 것 처럼 보임

- Arrow Function : 화살표 함수
함수를 정의할 때 function이라는 키워드를 사용하지 않고 =>로 대체
흔히 사용하는 콜백 함수의 문법을 간결화

- Enhanced Object Literals : 향상된 객체 리터럴
객체의 속성을 메서드롤 사용할 때 function 예약어을 생략하고 생성 가능
객체의 속성명과 값 명이 동일할 때 아래와 같이 축약 가능
var figures = 10;
var dictionary = {
  // figures: figures
  figures
};

- Modules : 자바스크립트 모듈화 방법
자밧그크립트 모듈 로더 라이브러리(AMD, Commons JS)기능을 js 언어 자체에서 지원
호출되기 전까지는 코드 실행과 동작을 하지 않는 특징이 있음

# Vuex : 상태 관리 라이브러리
무수히 많은 컴포넌트의 데이터를 관리하기 위한 상태 관리 패턴이자 라이브러리
React의 Flux 패턴에서 기인함
Vue.js 중고급 개발자로 성장하기 위한 필수 관문

- Flux
MVC패턴의 복잡한 데이터 흐름 문제를 해결하는 개발 패턴 : Undirectional data flow
action -> dispatcher -> model -> view
action : 화면에서 발생하는 이벤트 또는 사용자의 입력
dispatchere : 데이터를 변경하는 방법, 메서드
model : 화면에 표시할 데이터
view : 사용자에게 비춰지는 화면

- Vuex 컨셉
State : 컴포넌트 간에 공유하는 데이터 data
View : 데이터를 표시하는 화면 template
Action : 사용자의 입력에 따라 데이터를 변경하는 methods

- Vuex 구조
컴포넌트 -> 비동기 로직 -> 동기 로직 -> 상태
https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/

- Vuex 기술 요소
state : 여러 컴포넌트에 공유되는 데이터 data
getters : 연산된 state 갑을 접근하는 속성 computed
mutations : state값을 변경하는 이벤트 로직•메서드 methods
actions : 비동기 처리 로직을 선언하는 메서드 aysnc methods

- mutation
state의 값을 변경할 수 있는 유일한 방법이자 메서드
commit으로 동작

- state는 왜 직접 변경하지 않고 mutations로 변경할까?
여러 개의 컴포넌트에서 아래와 같이 state값을 변경하는 경우 어는 컴포넌트에서 해당 state를 변경했는지 추적하기 어려움
특정 시점에 어떤 컴포넌트가 state를 접근하여 변경한 건지 확인하기 어렵기 때문
따라서, 뷰의 반응성을 거스르지 않게 명시적으로 상태 변화를 수행. 반응성, 디버깅, 테스팅 혜택

- actions
비동기 처리 로직을 선언하느 메서드, 비동기 로직을 담당하는 mutations
데이터 요청, Promise, ES6 async과 같은 비동기 처리는 모두 actions에 선언
https://joshua1988.github.io/web-development/javascript/promise-for-beginners/
https://joshua1988.github.io/web-development/javascript/javascript-asynchronous-operation/

- 왜 비동기 처리 로직은 actions에 선언해야 할까?
언제 어느 컴포넌트에서 해당 state를 호출하고 변경했는지 확인하기가 어려움
state 값의 변화를 추적하기 어렵기 때문에 mutations 속성에는 동기 처리 로직만 넣어야 함

# Helper : 각 속성들을 더 쉽게 사용하는 방법
state -> mapState
getters -> mapGetters
mutations -> mapMutations
actions -> mapActions

- mapState : Vuex에 선언한 state 속성을 뷰 컴포넌트에 더 쉽게 연결해주는 헬퍼
- mapGetters : Vuex에 선언한 getters 속성을 뷰 컴포넌트에 더 쉽게 연결해주는 헬퍼
- mapMutatoins : Vuex에 선언한 mutations 속성을 뷰 컴포넌트에 더 쉽게 연결해주는 헬퍼
- mapActoins : Vuex에 선언한 actions 속성을 뷰 컴포넌트에 더 쉽게 연결해주는 헬퍼
- 헬퍼의 유연한 문법
 Vuex에 선언한 속성을 그대로 컴포넌트에 연겷하는 문법 : 인자를 선언하지 않아도 인자를 넘겨줌 -> 'addNumber' = addNumber(인자)
 Vuex에 선언한 속성을 컴포넌트의 특정 메서드에다가 연결하는 문법 -> 컴포넌트 메서드 명 : Store의 뮤테이션 명

# 라우터 Router
this.$router.push('경로') -> 네트워크 통신 없이 <router-view></router-view> 영역에 표시

# 하이 오더 컴포넌트
컴포넌트의 로직(코드)를 재사용하기 위한 고급 기술 : 레벨이 깊어짐

# Mixins
공통으로 사용하고 있는 로직, 기능들을 재사용하는 방법

# 데이터 호출 시점
1. 라우터 네비게이션 가드
https://router.vuejs.org/guide/advanced/navigation-guards.html
- 특정 URL로 접근하기 전의 동작을 정의하는 속성(함수)

2. 컴포넌트 라이프 사이클 훅
- created : 컴포넌트가 생성되자마자 호출되는 로직

# Async & Await
https://joshua1988.github.io/web-development/javascript/js-async-await/

# 외부 라이브러리 모듈화
- Vue.js 관련 라이브러리가 없을 때 일반 라이브러리를 결합할 수 있어야 함

# 컴포넌트 디자인 패턴
Common : 기본적인 컴포넌트 등록과 컴포넌트 통신
Slot : 마크업 확장이 가능한 컴포넌트
Controlled : 결합력이 높은 컴포넌트
Renderless : 데이터 처리 컴포넌트

# Interceptors
요청이나 응답 처리를 하기 전에 추가 로직을 놓을 수 있는 방법

# Jest










